import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error
%matplotlib inline #
df=pd.DataFrame(np.random.randint(0,100,size=(500,4)),columns=['tv','radio','newspaper','sales'])
df #
import matplotlib.pyplot as plt
import seaborn as sns #
df.shape #
df.info() #
df.describe() #
df.isnull().sum()*100/df.shape[0] #
df.corr() #
X = df['tv']
y = df['sales'] #
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state =0) #
import statsmodels.api as sm #
X_train_sm = sm.add_constant(X_train)
lr = sm.OLS(y_train, X_train_sm).fit() #
lr.params #
print(lr.summary()) #
plt.scatter(X_train, y_train)
plt.plot(X_train, 47.1086 + 0.0221*X_train, 'r')
plt.show() #
y_train_pred = lr.predict(X_train_sm)
res = (y_train - y_train_pred) #
X_test_sm = sm.add_constant(X_test)
y_pred = lr.predict(X_test_sm) #
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score #
np.sqrt(mean_squared_error(y_test, y_pred)) #
r_squared = r2_score(y_test, y_pred)
r_squared #
plt.scatter(X_test, y_test)
plt.plot(X_test, 47.1086 + 0.0221 * X_test, 'r')
plt.show() #